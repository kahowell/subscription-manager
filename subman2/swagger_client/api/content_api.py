# coding: utf-8

"""
    candlepin-rpc-api

    RPC-ish interface for candlepin.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ContentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def list_repo_overrides(self, **kwargs):  # noqa: E501
        """Lists all overrides from repositories specified with the repo option.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_repo_overrides(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consumer_id:
        :param list[str] repo: The repositories to list repo overrides for
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_repo_overrides_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_repo_overrides_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_repo_overrides_with_http_info(self, **kwargs):  # noqa: E501
        """Lists all overrides from repositories specified with the repo option.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_repo_overrides_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consumer_id:
        :param list[str] repo: The repositories to list repo overrides for
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consumer_id', 'repo']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_repo_overrides" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'consumer_id' in params:
            query_params.append(('consumer_id', params['consumer_id']))  # noqa: E501
        if 'repo' in params:
            query_params.append(('repo', params['repo']))  # noqa: E501
            collection_formats['repo'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['certAuth']  # noqa: E501

        return self.api_client.call_api(
            '/operations/list_repo_overrides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_repos(self, **kwargs):  # noqa: E501
        """Lists all of the repositories that are available to a system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_repos(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consumer_id:
        :param bool enabled: Lists all of the enabled repositories that are provided by the content service used by the system.
        :param bool disabled: Lists all of the disabled repositories that are provided by the content service used by the system.
        :return: list[Repo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_repos_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_repos_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_repos_with_http_info(self, **kwargs):  # noqa: E501
        """Lists all of the repositories that are available to a system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_repos_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consumer_id:
        :param bool enabled: Lists all of the enabled repositories that are provided by the content service used by the system.
        :param bool disabled: Lists all of the disabled repositories that are provided by the content service used by the system.
        :return: list[Repo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consumer_id', 'enabled', 'disabled']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_repos" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'consumer_id' in params:
            query_params.append(('consumer_id', params['consumer_id']))  # noqa: E501
        if 'enabled' in params:
            query_params.append(('enabled', params['enabled']))  # noqa: E501
        if 'disabled' in params:
            query_params.append(('disabled', params['disabled']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['certAuth']  # noqa: E501

        return self.api_client.call_api(
            '/operations/list_repos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Repo]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_repo_overrides(self, **kwargs):  # noqa: E501
        """Allows the user to manage custom content repository settings.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repo_overrides(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consumer_id:
        :param list[str] repo: The repositories to update repo overrides for
        :param list[str] add: Adds a named override with the provided value to repositories specified with the repo option (NAME:VALUE)
        :param list[str] remove: Removes a named override from the repositories specified.
        :param bool removeall: Removes all overrides from repositories specified.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_repo_overrides_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_repo_overrides_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_repo_overrides_with_http_info(self, **kwargs):  # noqa: E501
        """Allows the user to manage custom content repository settings.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repo_overrides_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consumer_id:
        :param list[str] repo: The repositories to update repo overrides for
        :param list[str] add: Adds a named override with the provided value to repositories specified with the repo option (NAME:VALUE)
        :param list[str] remove: Removes a named override from the repositories specified.
        :param bool removeall: Removes all overrides from repositories specified.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consumer_id', 'repo', 'add', 'remove', 'removeall']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repo_overrides" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'consumer_id' in params:
            query_params.append(('consumer_id', params['consumer_id']))  # noqa: E501
        if 'repo' in params:
            query_params.append(('repo', params['repo']))  # noqa: E501
            collection_formats['repo'] = 'multi'  # noqa: E501
        if 'add' in params:
            query_params.append(('add', params['add']))  # noqa: E501
            collection_formats['add'] = 'multi'  # noqa: E501
        if 'remove' in params:
            query_params.append(('remove', params['remove']))  # noqa: E501
            collection_formats['remove'] = 'multi'  # noqa: E501
        if 'removeall' in params:
            query_params.append(('removeall', params['removeall']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['certAuth']  # noqa: E501

        return self.api_client.call_api(
            '/operations/update_repo_overrides', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_repos(self, **kwargs):  # noqa: E501
        """Enable or disable repositories.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repos(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consumer_id:
        :param list[str] enable: Enables the specified repository, which is made available by the content sources identified in the system subscriptions.
        :param list[str] disable: Disables the specified repository, which is made available by the content sources identified in the system subscriptions.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_repos_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_repos_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_repos_with_http_info(self, **kwargs):  # noqa: E501
        """Enable or disable repositories.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repos_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consumer_id:
        :param list[str] enable: Enables the specified repository, which is made available by the content sources identified in the system subscriptions.
        :param list[str] disable: Disables the specified repository, which is made available by the content sources identified in the system subscriptions.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consumer_id', 'enable', 'disable']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repos" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'consumer_id' in params:
            query_params.append(('consumer_id', params['consumer_id']))  # noqa: E501
        if 'enable' in params:
            query_params.append(('enable', params['enable']))  # noqa: E501
            collection_formats['enable'] = 'multi'  # noqa: E501
        if 'disable' in params:
            query_params.append(('disable', params['disable']))  # noqa: E501
            collection_formats['disable'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['certAuth']  # noqa: E501

        return self.api_client.call_api(
            '/operations/update_repos', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
