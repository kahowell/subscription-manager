# coding: utf-8

"""
    candlepin-rpc-api

    RPC-ish interface for candlepin.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ProfileApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_service_level(self, **kwargs):  # noqa: E501
        """Displays the current configured service level preference for products installed on the system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_level(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consumer_id:
        :return: ListServiceLevelsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_level_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_service_level_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_service_level_with_http_info(self, **kwargs):  # noqa: E501
        """Displays the current configured service level preference for products installed on the system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_level_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consumer_id:
        :return: ListServiceLevelsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consumer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_level" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'consumer_id' in params:
            query_params.append(('consumer_id', params['consumer_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth', 'certAuth']  # noqa: E501

        return self.api_client.call_api(
            '/operations/list_servicelevels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListServiceLevelsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_releases(self, **kwargs):  # noqa: E501
        """Lists the available OS versions and the currently set release version (if any).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_releases(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consumer_id:
        :return: ListReleasesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_releases_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_releases_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_releases_with_http_info(self, **kwargs):  # noqa: E501
        """Lists the available OS versions and the currently set release version (if any).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_releases_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consumer_id:
        :return: ListReleasesResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consumer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_releases" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'consumer_id' in params:
            query_params.append(('consumer_id', params['consumer_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['certAuth']  # noqa: E501

        return self.api_client.call_api(
            '/operations/list_releases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListReleasesResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_release(self, **kwargs):  # noqa: E501
        """Sets a sticky OS version to use when installing or updating packages.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_release(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consumer_id:
        :param str release: Sets the minor (Y-stream) release version to use, such as 6.3.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_release_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.set_release_with_http_info(**kwargs)  # noqa: E501
            return data

    def set_release_with_http_info(self, **kwargs):  # noqa: E501
        """Sets a sticky OS version to use when installing or updating packages.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_release_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consumer_id:
        :param str release: Sets the minor (Y-stream) release version to use, such as 6.3.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consumer_id', 'release']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_release" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'consumer_id' in params:
            query_params.append(('consumer_id', params['consumer_id']))  # noqa: E501
        if 'release' in params:
            query_params.append(('release', params['release']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['certAuth']  # noqa: E501

        return self.api_client.call_api(
            '/operations/set_release', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_service_level(self, **kwargs):  # noqa: E501
        """Set a service-level preference for this system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_service_level(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consumer_id:
        :param str release: Sets the minor (Y-stream) release version to use, such as 6.3.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_service_level_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.set_service_level_with_http_info(**kwargs)  # noqa: E501
            return data

    def set_service_level_with_http_info(self, **kwargs):  # noqa: E501
        """Set a service-level preference for this system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_service_level_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str consumer_id:
        :param str release: Sets the minor (Y-stream) release version to use, such as 6.3.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['consumer_id', 'release']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_service_level" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'consumer_id' in params:
            query_params.append(('consumer_id', params['consumer_id']))  # noqa: E501
        if 'release' in params:
            query_params.append(('release', params['release']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['certAuth']  # noqa: E501

        return self.api_client.call_api(
            '/operations/set_servicelevel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_profile(self, **kwargs):  # noqa: E501
        """Updates the system information.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_profile(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SystemProfile body:
        :param str consumer_id:
        :return: SyncResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_profile_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_profile_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_profile_with_http_info(self, **kwargs):  # noqa: E501
        """Updates the system information.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_profile_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SystemProfile body:
        :param str consumer_id:
        :return: SyncResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'consumer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_profile" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'consumer_id' in params:
            query_params.append(('consumer_id', params['consumer_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/vnd.api+json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/vnd.api+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['certAuth']  # noqa: E501

        return self.api_client.call_api(
            '/operations/update_profile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SyncResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
