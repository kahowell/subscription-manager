# coding: utf-8

"""
    candlepin-rpc-api

    RPC-ish interface for candlepin.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SoftwarePackage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'version': 'str',
        'release': 'str',
        'arch': 'str',
        'epoch': 'str'
    }

    attribute_map = {
        'name': 'name',
        'version': 'version',
        'release': 'release',
        'arch': 'arch',
        'epoch': 'epoch'
    }

    def __init__(self, name=None, version=None, release=None, arch=None, epoch=None):  # noqa: E501
        """SoftwarePackage - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._version = None
        self._release = None
        self._arch = None
        self._epoch = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if version is not None:
            self.version = version
        if release is not None:
            self.release = release
        if arch is not None:
            self.arch = arch
        if epoch is not None:
            self.epoch = epoch

    @property
    def name(self):
        """Gets the name of this SoftwarePackage.  # noqa: E501


        :return: The name of this SoftwarePackage.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SoftwarePackage.


        :param name: The name of this SoftwarePackage.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def version(self):
        """Gets the version of this SoftwarePackage.  # noqa: E501


        :return: The version of this SoftwarePackage.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SoftwarePackage.


        :param version: The version of this SoftwarePackage.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def release(self):
        """Gets the release of this SoftwarePackage.  # noqa: E501


        :return: The release of this SoftwarePackage.  # noqa: E501
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this SoftwarePackage.


        :param release: The release of this SoftwarePackage.  # noqa: E501
        :type: str
        """

        self._release = release

    @property
    def arch(self):
        """Gets the arch of this SoftwarePackage.  # noqa: E501


        :return: The arch of this SoftwarePackage.  # noqa: E501
        :rtype: str
        """
        return self._arch

    @arch.setter
    def arch(self, arch):
        """Sets the arch of this SoftwarePackage.


        :param arch: The arch of this SoftwarePackage.  # noqa: E501
        :type: str
        """

        self._arch = arch

    @property
    def epoch(self):
        """Gets the epoch of this SoftwarePackage.  # noqa: E501


        :return: The epoch of this SoftwarePackage.  # noqa: E501
        :rtype: str
        """
        return self._epoch

    @epoch.setter
    def epoch(self, epoch):
        """Sets the epoch of this SoftwarePackage.


        :param epoch: The epoch of this SoftwarePackage.  # noqa: E501
        :type: str
        """

        self._epoch = epoch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SoftwarePackage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SoftwarePackage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
