# coding: utf-8

"""
    candlepin-rpc-api

    RPC-ish interface for candlepin.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SystemProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'facts': 'dict(str, str)',
        'enabled_repos': 'list[str]',
        'installed_packages': 'list[SoftwarePackage]',
        'installed_products': 'list[InstalledProduct]',
        'installed_tags': 'list[str]',
        'module_profile': 'list[Module]',
        'release': 'str',
        'system_purpose': 'SystemPurpose'
    }

    attribute_map = {
        'facts': 'facts',
        'enabled_repos': 'enabled_repos',
        'installed_packages': 'installed_packages',
        'installed_products': 'installed_products',
        'installed_tags': 'installed_tags',
        'module_profile': 'module_profile',
        'release': 'release',
        'system_purpose': 'system_purpose'
    }

    def __init__(self, facts=None, enabled_repos=None, installed_packages=None, installed_products=None, installed_tags=None, module_profile=None, release=None, system_purpose=None):  # noqa: E501
        """SystemProfile - a model defined in Swagger"""  # noqa: E501
        self._facts = None
        self._enabled_repos = None
        self._installed_packages = None
        self._installed_products = None
        self._installed_tags = None
        self._module_profile = None
        self._release = None
        self._system_purpose = None
        self.discriminator = None
        if facts is not None:
            self.facts = facts
        if enabled_repos is not None:
            self.enabled_repos = enabled_repos
        if installed_packages is not None:
            self.installed_packages = installed_packages
        if installed_products is not None:
            self.installed_products = installed_products
        if installed_tags is not None:
            self.installed_tags = installed_tags
        if module_profile is not None:
            self.module_profile = module_profile
        if release is not None:
            self.release = release
        if system_purpose is not None:
            self.system_purpose = system_purpose

    @property
    def facts(self):
        """Gets the facts of this SystemProfile.  # noqa: E501


        :return: The facts of this SystemProfile.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._facts

    @facts.setter
    def facts(self, facts):
        """Sets the facts of this SystemProfile.


        :param facts: The facts of this SystemProfile.  # noqa: E501
        :type: dict(str, str)
        """

        self._facts = facts

    @property
    def enabled_repos(self):
        """Gets the enabled_repos of this SystemProfile.  # noqa: E501


        :return: The enabled_repos of this SystemProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._enabled_repos

    @enabled_repos.setter
    def enabled_repos(self, enabled_repos):
        """Sets the enabled_repos of this SystemProfile.


        :param enabled_repos: The enabled_repos of this SystemProfile.  # noqa: E501
        :type: list[str]
        """

        self._enabled_repos = enabled_repos

    @property
    def installed_packages(self):
        """Gets the installed_packages of this SystemProfile.  # noqa: E501


        :return: The installed_packages of this SystemProfile.  # noqa: E501
        :rtype: list[SoftwarePackage]
        """
        return self._installed_packages

    @installed_packages.setter
    def installed_packages(self, installed_packages):
        """Sets the installed_packages of this SystemProfile.


        :param installed_packages: The installed_packages of this SystemProfile.  # noqa: E501
        :type: list[SoftwarePackage]
        """

        self._installed_packages = installed_packages

    @property
    def installed_products(self):
        """Gets the installed_products of this SystemProfile.  # noqa: E501


        :return: The installed_products of this SystemProfile.  # noqa: E501
        :rtype: list[InstalledProduct]
        """
        return self._installed_products

    @installed_products.setter
    def installed_products(self, installed_products):
        """Sets the installed_products of this SystemProfile.


        :param installed_products: The installed_products of this SystemProfile.  # noqa: E501
        :type: list[InstalledProduct]
        """

        self._installed_products = installed_products

    @property
    def installed_tags(self):
        """Gets the installed_tags of this SystemProfile.  # noqa: E501


        :return: The installed_tags of this SystemProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._installed_tags

    @installed_tags.setter
    def installed_tags(self, installed_tags):
        """Sets the installed_tags of this SystemProfile.


        :param installed_tags: The installed_tags of this SystemProfile.  # noqa: E501
        :type: list[str]
        """

        self._installed_tags = installed_tags

    @property
    def module_profile(self):
        """Gets the module_profile of this SystemProfile.  # noqa: E501


        :return: The module_profile of this SystemProfile.  # noqa: E501
        :rtype: list[Module]
        """
        return self._module_profile

    @module_profile.setter
    def module_profile(self, module_profile):
        """Sets the module_profile of this SystemProfile.


        :param module_profile: The module_profile of this SystemProfile.  # noqa: E501
        :type: list[Module]
        """

        self._module_profile = module_profile

    @property
    def release(self):
        """Gets the release of this SystemProfile.  # noqa: E501


        :return: The release of this SystemProfile.  # noqa: E501
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this SystemProfile.


        :param release: The release of this SystemProfile.  # noqa: E501
        :type: str
        """

        self._release = release

    @property
    def system_purpose(self):
        """Gets the system_purpose of this SystemProfile.  # noqa: E501


        :return: The system_purpose of this SystemProfile.  # noqa: E501
        :rtype: SystemPurpose
        """
        return self._system_purpose

    @system_purpose.setter
    def system_purpose(self, system_purpose):
        """Sets the system_purpose of this SystemProfile.


        :param system_purpose: The system_purpose of this SystemProfile.  # noqa: E501
        :type: SystemPurpose
        """

        self._system_purpose = system_purpose

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
