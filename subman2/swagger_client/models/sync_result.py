# coding: utf-8

"""
    candlepin-rpc-api

    RPC-ish interface for candlepin.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SyncResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consumer': 'Consumer',
        'identity_certificate': 'Certificate',
        'added_entitlement_certificates': 'list[Certificate]',
        'added_repos': 'list[Repo]',
        'removed_entitlement_certificate_ids': 'list[str]',
        'release': 'str',
        'state_token': 'str',
        'subscription_status': 'SubscriptionStatus',
        'system_purpose': 'SystemPurpose'
    }

    attribute_map = {
        'consumer': 'consumer',
        'identity_certificate': 'identityCertificate',
        'added_entitlement_certificates': 'addedEntitlementCertificates',
        'added_repos': 'addedRepos',
        'removed_entitlement_certificate_ids': 'removedEntitlementCertificateIds',
        'release': 'release',
        'state_token': 'state_token',
        'subscription_status': 'subscription_status',
        'system_purpose': 'system_purpose'
    }

    def __init__(self, consumer=None, identity_certificate=None, added_entitlement_certificates=None, added_repos=None, removed_entitlement_certificate_ids=None, release=None, state_token=None, subscription_status=None, system_purpose=None):  # noqa: E501
        """SyncResult - a model defined in Swagger"""  # noqa: E501
        self._consumer = None
        self._identity_certificate = None
        self._added_entitlement_certificates = None
        self._added_repos = None
        self._removed_entitlement_certificate_ids = None
        self._release = None
        self._state_token = None
        self._subscription_status = None
        self._system_purpose = None
        self.discriminator = None
        if consumer is not None:
            self.consumer = consumer
        if identity_certificate is not None:
            self.identity_certificate = identity_certificate
        if added_entitlement_certificates is not None:
            self.added_entitlement_certificates = added_entitlement_certificates
        if added_repos is not None:
            self.added_repos = added_repos
        if removed_entitlement_certificate_ids is not None:
            self.removed_entitlement_certificate_ids = removed_entitlement_certificate_ids
        if release is not None:
            self.release = release
        if state_token is not None:
            self.state_token = state_token
        if subscription_status is not None:
            self.subscription_status = subscription_status
        if system_purpose is not None:
            self.system_purpose = system_purpose

    @property
    def consumer(self):
        """Gets the consumer of this SyncResult.  # noqa: E501


        :return: The consumer of this SyncResult.  # noqa: E501
        :rtype: Consumer
        """
        return self._consumer

    @consumer.setter
    def consumer(self, consumer):
        """Sets the consumer of this SyncResult.


        :param consumer: The consumer of this SyncResult.  # noqa: E501
        :type: Consumer
        """

        self._consumer = consumer

    @property
    def identity_certificate(self):
        """Gets the identity_certificate of this SyncResult.  # noqa: E501


        :return: The identity_certificate of this SyncResult.  # noqa: E501
        :rtype: Certificate
        """
        return self._identity_certificate

    @identity_certificate.setter
    def identity_certificate(self, identity_certificate):
        """Sets the identity_certificate of this SyncResult.


        :param identity_certificate: The identity_certificate of this SyncResult.  # noqa: E501
        :type: Certificate
        """

        self._identity_certificate = identity_certificate

    @property
    def added_entitlement_certificates(self):
        """Gets the added_entitlement_certificates of this SyncResult.  # noqa: E501


        :return: The added_entitlement_certificates of this SyncResult.  # noqa: E501
        :rtype: list[Certificate]
        """
        return self._added_entitlement_certificates

    @added_entitlement_certificates.setter
    def added_entitlement_certificates(self, added_entitlement_certificates):
        """Sets the added_entitlement_certificates of this SyncResult.


        :param added_entitlement_certificates: The added_entitlement_certificates of this SyncResult.  # noqa: E501
        :type: list[Certificate]
        """

        self._added_entitlement_certificates = added_entitlement_certificates

    @property
    def added_repos(self):
        """Gets the added_repos of this SyncResult.  # noqa: E501


        :return: The added_repos of this SyncResult.  # noqa: E501
        :rtype: list[Repo]
        """
        return self._added_repos

    @added_repos.setter
    def added_repos(self, added_repos):
        """Sets the added_repos of this SyncResult.


        :param added_repos: The added_repos of this SyncResult.  # noqa: E501
        :type: list[Repo]
        """

        self._added_repos = added_repos

    @property
    def removed_entitlement_certificate_ids(self):
        """Gets the removed_entitlement_certificate_ids of this SyncResult.  # noqa: E501


        :return: The removed_entitlement_certificate_ids of this SyncResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._removed_entitlement_certificate_ids

    @removed_entitlement_certificate_ids.setter
    def removed_entitlement_certificate_ids(self, removed_entitlement_certificate_ids):
        """Sets the removed_entitlement_certificate_ids of this SyncResult.


        :param removed_entitlement_certificate_ids: The removed_entitlement_certificate_ids of this SyncResult.  # noqa: E501
        :type: list[str]
        """

        self._removed_entitlement_certificate_ids = removed_entitlement_certificate_ids

    @property
    def release(self):
        """Gets the release of this SyncResult.  # noqa: E501


        :return: The release of this SyncResult.  # noqa: E501
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this SyncResult.


        :param release: The release of this SyncResult.  # noqa: E501
        :type: str
        """

        self._release = release

    @property
    def state_token(self):
        """Gets the state_token of this SyncResult.  # noqa: E501


        :return: The state_token of this SyncResult.  # noqa: E501
        :rtype: str
        """
        return self._state_token

    @state_token.setter
    def state_token(self, state_token):
        """Sets the state_token of this SyncResult.


        :param state_token: The state_token of this SyncResult.  # noqa: E501
        :type: str
        """

        self._state_token = state_token

    @property
    def subscription_status(self):
        """Gets the subscription_status of this SyncResult.  # noqa: E501


        :return: The subscription_status of this SyncResult.  # noqa: E501
        :rtype: SubscriptionStatus
        """
        return self._subscription_status

    @subscription_status.setter
    def subscription_status(self, subscription_status):
        """Sets the subscription_status of this SyncResult.


        :param subscription_status: The subscription_status of this SyncResult.  # noqa: E501
        :type: SubscriptionStatus
        """

        self._subscription_status = subscription_status

    @property
    def system_purpose(self):
        """Gets the system_purpose of this SyncResult.  # noqa: E501


        :return: The system_purpose of this SyncResult.  # noqa: E501
        :rtype: SystemPurpose
        """
        return self._system_purpose

    @system_purpose.setter
    def system_purpose(self, system_purpose):
        """Sets the system_purpose of this SyncResult.


        :param system_purpose: The system_purpose of this SyncResult.  # noqa: E501
        :type: SystemPurpose
        """

        self._system_purpose = system_purpose

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SyncResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyncResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
